svg.size(3, 1)
  .padding(0.05)
  .strokeWidth(0.005);

const bottomLayer = svg.g();
const cpLayer = svg.g();
const matrixLayer = svg.g();
const indicatorLayer = svg.g();
const foldedLayer = svg.g()
  .rotate(180)
  .translate(-2.2, -0.75);

const colors = { 0: "#fb4", "-1": "#e53", 1: "#38c" };

const draw_matrix = (matrix) => {
  const group = svg.g();
  const num_faces = matrix.length;
  const rect_w = 1 / num_faces;
  group.rect(1, 1).stroke("black").fill("white");
  matrix.map((row, i) => row.map((_, j) => group
    .rect(i/num_faces, j/num_faces, rect_w, rect_w)
    .stroke("none")
    .fill(colors[matrix[i][j]])));
  return group;
};

const update = (cp, matrix, facePolys, point) => {
  bottomLayer.removeChildren();
  indicatorLayer.removeChildren();
  facePolys.forEach(face => face.fill("#158").opacity(0.0));

  const near = cp.nearest(point);
  if (near.face === undefined) { return; }

  // highlight faces on cp
  matrix[near.face]
    .map((value, i) => bottomLayer
      .polygon(cp.faces_vertices[i]
        .map(v => cp.vertices_coords[v]))
      .fill(colors[value]));
  bottomLayer
    .polygon(cp.faces_vertices[near.face]
      .map(v => cp.vertices_coords[v]))
    .fill("#fb4");

  // highlight faces on the folded origami
  facePolys
    .filter((_, i) => matrix[near.face][i])
    .forEach(face => face.opacity(0.15));
  // the selected face
  facePolys[near.face].remove();
  facePolys[near.face]
    .opacity(1)
    .fill("#fb4")
    .appendTo(foldedLayer);

  // grid indicator
  const num_faces = cp.faces_vertices.length;
  const w = 1 / num_faces;
  indicatorLayer.rect(-w / 2, near.face / num_faces - (w / 2), 1 + w, w * 2)
    .translate(2, 0)
    .fill("none")
    .stroke("black")
    .strokeWidth(w);
};

const load = (FOLD) => {
  cpLayer.removeChildren();
  matrixLayer.removeChildren();
  foldedLayer.removeChildren();

  const cp = ear.origami(FOLD);
  const folded = cp.flatFolded(1);

  // 1. all solutions,
  const all_conditions = ear.layer.all_layer_conditions(folded);
  // 2. or, one solution only.
  // const all_conditions = [ear.layer.one_layer_conditions(folded)];
  // 3. or, with a dividing axis, all solutions
  // const all_conditions = ear.layer.all_layer_conditions_with_axis(folded, cp, ear.line([1, -1], [0, 1]));
  // 4. or, a dividing axis, one solution only.
  // const all_conditions = [ear.layer.one_layer_conditions_with_axis(folded, cp, ear.line([1, -1], [0, 1]))];

  // const conditions = all_conditions.certain;
  const conditions = all_conditions[0];
  const layers_face = ear.layer.topological_order(conditions);
  // console.log(all_conditions.length, "all_conditions", all_conditions);

  // make some matrices for vizualization only
  const flip = { 1:-1, "-1":1, 0:0};
  const conditions_matrix = folded.faces_vertices.map(() => []);
  Object.keys(conditions)
    .forEach(key => {
      const pair = key.split(" ");
      conditions_matrix[pair[0]][pair[1]] = conditions[key];
      conditions_matrix[pair[1]][pair[0]] = flip[conditions[key]];
    });

  // draw things
  folded.faces_layer = ear.graph.invert_map(layers_face);
  foldedLayer.origami(folded, false);
  delete folded.faces_layer;
  const facePolys = folded.faces_vertices
    .map(vertices => vertices
      .map(v => folded.vertices_coords[v]))
    .map(face => foldedLayer.polygon(face).fill("#e53").opacity(0));

  cpLayer.origami(cp, {
    faces: { fill: "none" },
    boundaries: { fill: "none" },
    edges: {
      mountain: { stroke: "black" },
      valley: { stroke: "black", "stroke-dasharray": "0.02 0.01" },
    }
  });

  draw_matrix(conditions_matrix)
    .translate(2, 0)
    .appendTo(matrixLayer);

  svg.onMove = (e) => update(cp, conditions_matrix, facePolys, e);
  // update(cp, conditions_matrix, facePolys, [0.3, 0.69]);
};

load({"vertices_coords":[[0.6213203435596424,0.3786796564403576],[0.6642135623730948,0.3357864376269052],[0.20710678118654763,0.5],[0.28033008588991065,0.5303300858899106],[0.585786437626905,0.17157287525381015],[0.5606601717798212,0.2322330470336318],[0.7677669529663687,0.4393398282201788],[0.8284271247461901,0.4142135623730951],[0.46966991411008924,0.7196699141100894],[0.5,0.7928932188134525],[0.3964466094067261,0.75],[0.25,0.6035533905932737],[0.3232233047033631,0.6767766952966369],[0.5428932188134522,0.18933982822017908],[0.8106601717798212,0.45710678118654763],[0,0.5],[0,0.7071067811865483],[0.2928932188134529,1],[0.5,1],[0.5606601717798213,0.5251262658470837],[0.4748737341529164,0.4393398282201788],[0.7677669529663682,0.2322330470336318],[0.792893218813452,0.20710678118654802],[0.7928932188134523,0.5],[0.9142135623730951,0.5],[0.7071067811865475,0.585786437626905],[0.41421356237309515,0.29289321881345265],[0.5,0.08578643762690596],[0.5,0.20710678118654782],[0.35355339059327373,0.3535533905932738],[0.6464466094067263,0.6464466094067263],[0.7071067811865476,0.17157287525381035],[0.8284271247461902,0.29289321881345215],[1,0.2928932188134539],[0.6360389693210721,0],[0.6464466094067263,0.025126265847084096],[0.9748737341529168,0.3535533905932736],[1,0.3639610306789273],[0.7071067811865477,0],[0.5857864376269051,1],[0,0],[0.2928932188134552,0],[1,0.7071067811865479],[1,1],[0.5857864376269051,0.7928932188134524],[0.5732233047033631,0.8232233047033632],[0.1767766952966373,0.4267766952966368],[0.20710678118654824,0.4142135623730948],[0.14644660940672638,0.5606601717798214],[0.17677669529663695,0.5732233047033632],[0.4267766952966368,0.8232233047033631],[0.43933982822017864,0.8535533905932737],[0.1464466094067262,0.6464466094067266],[0.10355339059327401,0.75],[0.25,0.8964466094067264],[0.35355339059327384,0.8535533905932737],[0,1],[0.10355339059327372,0.8964466094067264],[1,0],[0.20710678118654777,0.20710678118654777],[0.7928932188134525,0.7928932188134525],[0.6464466094067263,0.8535533905932738],[0.14644660940672682,0.3535533905932733],[0.3964466094067264,0.9571067811865477],[0.04289321881345272,0.6035533905932742],[0,0.4142135623730956],[0.41421356237309503,0.585786437626905]],"edges_vertices":[[0,1],[2,3],[4,5],[6,7],[8,9],[10,9],[2,11],[10,8],[3,11],[12,10],[13,5],[6,14],[15,16],[17,18],[0,19],[20,0],[21,22],[1,6],[0,6],[23,24],[19,25],[26,20],[27,28],[5,0],[5,1],[29,26],[30,25],[26,28],[25,23],[28,5],[6,23],[11,12],[7,14],[14,23],[28,13],[13,4],[4,31],[32,7],[32,33],[34,35],[36,37],[33,36],[36,24],[27,35],[35,38],[38,31],[18,39],[40,41],[42,43],[30,44],[44,45],[46,47],[47,29],[48,49],[49,11],[10,50],[50,51],[52,11],[53,11],[54,10],[10,55],[56,57],[57,12],[5,20],[19,6],[33,37],[14,24],[7,24],[32,24],[32,36],[32,6],[21,6],[1,21],[5,21],[5,31],[27,13],[27,4],[27,31],[34,38],[35,31],[31,22],[22,32],[58,33],[22,58],[38,58],[40,59],[60,43],[18,61],[15,62],[17,63],[61,60],[59,62],[64,16],[39,60],[65,59],[39,43],[37,42],[24,42],[25,60],[59,26],[41,27],[41,34],[9,45],[45,61],[62,46],[46,2],[62,47],[44,61],[47,2],[9,44],[54,55],[55,50],[50,9],[2,49],[49,52],[52,53],[55,51],[48,52],[51,9],[48,2],[63,18],[40,65],[65,15],[15,64],[57,54],[53,57],[55,63],[64,52],[20,66],[66,0],[66,19],[9,30],[8,30],[66,8],[12,66],[3,66],[29,3],[2,29],[15,46],[15,2],[15,48],[15,52],[51,18],[55,18],[9,18],[45,18],[54,63],[64,53],[16,56],[56,17]],"edges_assignment":["V","M","V","V","M","V","V","M","M","V","V","V","B","B","M","M","V","V","M","M","M","M","M","M","V","V","V","M","M","M","M","V","M","V","V","M","M","M","M","M","M","V","V","V","V","M","B","B","B","V","V","V","V","V","V","V","V","M","V","V","M","V","M","V","V","B","V","M","V","V","M","V","M","V","M","V","M","V","B","V","M","M","B","M","B","M","M","M","M","M","M","M","M","V","V","B","B","V","M","M","V","B","M","V","V","M","M","M","V","V","M","V","M","M","V","M","M","M","V","V","V","B","B","V","V","V","V","V","M","V","M","M","V","M","V","M","V","M","V","M","V","M","V","M","M","V","V","V","B","B"],"edges_foldAngle":[180,-180,180,180,-180,180,180,-180,-180,180,180,180,0,0,-180,-180,180,180,-180,-180,-180,-180,-180,-180,180,180,180,-180,-180,-180,-180,180,-180,180,180,-180,-180,-180,-180,-180,-180,180,180,180,180,-180,0,0,0,180,180,180,180,180,180,180,180,-180,180,180,-180,180,-180,180,180,0,180,-180,180,180,-180,180,-180,180,-180,180,-180,180,0,180,-180,-180,0,-180,0,-180,-180,-180,-180,-180,-180,-180,-180,180,180,0,0,180,-180,-180,180,0,-180,180,180,-180,-180,-180,180,180,-180,180,-180,-180,180,-180,-180,-180,180,180,180,0,0,180,180,180,180,180,-180,180,-180,-180,180,-180,180,-180,180,-180,180,-180,180,-180,180,-180,-180,180,180,180,0,0],"faces_vertices":[[5,0,20],[1,0,5],[6,0,1],[19,0,6],[66,0,19],[20,0,66],[21,1,5],[6,1,21],[46,2,15],[47,2,46],[29,2,47],[3,2,29],[11,2,3],[49,2,11],[48,2,49],[15,2,48],[66,3,29,26,20],[11,3,66,12],[27,4,13],[31,4,27],[5,4,31],[13,4,5],[28,5,20,26],[13,5,28],[21,5,31,22],[32,6,21,22],[7,6,32],[14,6,7],[23,6,14],[19,6,23,25],[24,7,32],[14,7,24],[66,8,10,12],[30,8,66,19,25],[9,8,30],[10,8,9],[10,9,50],[44,9,30],[45,9,44],[18,9,45],[51,9,18],[50,9,51],[12,10,54,57],[55,10,50],[54,10,55],[49,11,52],[53,11,12,57],[52,11,53],[27,13,28],[23,14,24],[62,15,65,59],[46,15,62],[52,15,48],[64,15,52],[16,15,64],[56,16,64,53,57],[63,17,56,57,54],[18,17,63],[55,18,63],[51,18,55],[61,18,45],[39,18,61,60],[58,22,31,38],[32,22,58,33],[25,23,24,42,43,60],[36,24,32],[42,24,36,37],[30,25,60,61,44],[59,26,29,47,62],[28,26,59,40,41,27],[35,27,41,34],[31,27,35],[38,31,35],[36,32,33],[36,33,37],[35,34,38],[43,39,60],[65,40,59],[45,44,61],[47,46,62],[52,48,49],[55,50,51],[64,52,53],[63,54,55]]});
